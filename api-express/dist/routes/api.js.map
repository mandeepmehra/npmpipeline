{"version":3,"sources":["../../src/routes/api.js"],"names":["router","express","Router","dbhost","console","log","toString","useNewUrlParser","userSchema","Schema","name","String","age","Number","User","get","req","res","send","find","err","users","status","error","json","findById","params","id","post","user","body","save","message"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAHA;AAIA,IAAIA,MAAM,GAAGC,oBAAQC,MAAR,EAAb,C,CAEA;AACA;;;AACA,IAAMC,MAAM,GAAE,oEAAd,C,CACA;;AACAC,OAAO,CAACC,GAAR,CAAa,oCAAqCF,MAAM,CAACG,QAAP,EAAlD,E,CAEA;;AACA,uBAAQH,MAAR,EAAe;AAAEI,EAAAA,eAAe,EAAE;AAAnB,CAAf;AACAH,OAAO,CAACC,GAAR,CAAa,0CAA2CF,MAAM,CAACG,QAAP,EAAxD,E,CACA;;AACA,IAAME,UAAU,GAAG,IAAIC,gBAAJ,CAAW;AAC5BC,EAAAA,IAAI,EAAEC,MADsB;AAE5BC,EAAAA,GAAG,EAAEC;AAFuB,CAAX,CAAnB,C,CAKA;;AACA,IAAMC,IAAI,GAAG,qBAAM,MAAN,EAAcN,UAAd,CAAb;AACAR,MAAM,CAACe,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7BA,EAAAA,GAAG,CAACC,IAAJ,CAAS,iBAAT;AACA,CAFD;AAKA;;AACAlB,MAAM,CAACe,GAAP,CAAW,QAAX,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClCH,EAAAA,IAAI,CAACK,IAAL,CAAU,EAAV,EAAc,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC7B,QAAID,GAAJ,EAASH,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqBK,KAArB;AACTN,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBH,KAArB;AACA,GAHD;AAIA,CALD;AAOA;;AACArB,MAAM,CAACe,GAAP,CAAW,YAAX,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtCH,EAAAA,IAAI,CAACW,QAAL,CAAcT,GAAG,CAACU,MAAJ,CAAWC,EAAzB,EAA6B,UAACP,GAAD,EAAMC,KAAN,EAAgB;AAC5C,QAAID,GAAJ,EAAQ,CAAE;;AAACH,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqBK,KAArB;AAEXN,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBH,KAArB;AACA,GAJD;AAKA,CAND;AAQA;;AACArB,MAAM,CAAC4B,IAAP,CAAY,QAAZ,EAAsB,UAACZ,GAAD,EAAMC,GAAN,EAAc;AACnC,MAAIY,IAAI,GAAG,IAAIf,IAAJ,CAAS;AACnBJ,IAAAA,IAAI,EAAEM,GAAG,CAACc,IAAJ,CAASpB,IADI;AAEnBE,IAAAA,GAAG,EAAEI,GAAG,CAACc,IAAJ,CAASlB;AAFK,GAAT,CAAX;AAKAiB,EAAAA,IAAI,CAACE,IAAL,CAAU,UAAAR,KAAK,EAAI;AAClB,QAAIA,KAAJ,EAAWN,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqBK,KAArB;AAEXN,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AACpBQ,MAAAA,OAAO,EAAE;AADW,KAArB;AAGA,GAND;AAOA,CAbD;eAeehC,M","sourcesContent":["// Import dependencies\nimport { connect, Schema, model } from 'mongoose';\nimport {database} from '../config';\nimport express  from 'express';\nvar router = express.Router();\n\n// MongoDB URL from the docker-compose file\n//const dbHost = 'mongodb://database/mean-docker';\nconst dbhost= 'mongodb://guesttuser:guestuserpassword@my-api-mongodb:27017/meanDB';\n// Connect to mongodb\nconsole.log (\"trying to connect to mongodb ..\" +  dbhost.toString())\n\n//connect(database.url);\nconnect(dbhost,{ useNewUrlParser: true });\nconsole.log (\"successfully connected  to mongodb ..\" +  dbhost.toString())\n// create mongoose schema\nconst userSchema = new Schema({\n  name: String,\n  age: Number\n});\n\n// create mongoose model\nconst User = model('User', userSchema);\nrouter.get('/', (req, res) => {\n\tres.send(\"API is working \");\n})\n\n\n/* GET all Users */\nrouter.get('/users', (req, res) => {\n\tUser.find({}, (err, users) => {\n\t\tif (err) res.status(500).send(error)\n\t\tres.status(200).json(users);\n\t});\n});\n\n/* GET one users. */\nrouter.get('/users/:id', (req, res) => {\n\tUser.findById(req.params.id, (err, users) => {\n\t\tif (err){} res.status(500).send(error)\n\n\t\tres.status(200).json(users);\n\t});\n});\n\n/* Create a user. */\nrouter.post('/users', (req, res) => {\n\tlet user = new User({\n\t\tname: req.body.name,\n\t\tage: req.body.age\n\t});\n\n\tuser.save(error => {\n\t\tif (error) res.status(500).send(error);\n\n\t\tres.status(201).json({\n\t\t\tmessage: 'User created successfully'\n\t\t});\n\t});\n});\n\nexport default router;\n"],"file":"api.js"}